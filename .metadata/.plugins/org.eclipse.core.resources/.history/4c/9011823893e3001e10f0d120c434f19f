package com.emailSender.Controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.Map;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import jakarta.servlet.http.HttpSession;

@Controller
@SessionAttributes("base64Image")
public class QrController {


	@PostMapping(value = "/generateUPIQR", produces = MediaType.TEXT_PLAIN_VALUE)
	public String generateUPIQRCode(@RequestBody Map<String, Object> requestBody, HttpSession session, Model model) {
	    double amount = Double.parseDouble(requestBody.get("amount").toString());
	          try {
	        	  session.removeAttribute("qrImage");
	        	  session.removeAttribute("upiId");
	        	  session.removeAttribute("amount");
	        	  
	        	  model.asMap().remove("amount");
	        	  
//	        	  System.out.println(model.getAttribute("ammount"));
//	              System.out.println(session.getAttribute("qrImage"));
//	              System.out.println(session.getAttribute("upiId"));
//	              System.out.println(session.getAttribute("amount"));
            // Construct UPI URL
            String vpa = "rohitkumarah369@ibl";
            String upiUrl = "upi://pay?pa=" + vpa + "&am=" + amount;

            // Generate QR code
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            BitMatrix bitMatrix = qrCodeWriter.encode(upiUrl, BarcodeFormat.QR_CODE, 300, 300);

            // Convert BitMatrix to byte array
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            MatrixToImageWriter.writeToStream(bitMatrix, "PNG", byteArrayOutputStream);
            byte[] qrCodeBytes = byteArrayOutputStream.toByteArray();

            // Convert byte array to base64 string
            String base64Image = Base64.getEncoder().encodeToString(qrCodeBytes);

            // Store base64 image data in session
            session.setAttribute("qrImage", base64Image);
            session.setAttribute("upiId", vpa);
            session.setAttribute("amount", amount);
           System.out.println(session.getAttribute("qrImage"));
           System.out.println(session.getAttribute("upiId"));
           System.out.println(session.getAttribute("amount"));

           //Store base64 image data in model attributes instead of session
//           model.addAttribute("qrImage", base64Image);
//           model.addAttribute("upiId", vpa);
           model.addAttribute("ammount", session.getAttribute("amount"));
           System.out.println("*****Model Part *****");
//           System.out.println(model.getAttribute("qrImage"));
//           System.out.println(model.getAttribute("upiId"));
           System.out.println(model.getAttribute("ammount"));
           return "pay"; 

        } catch (WriterException | IOException e) {
            e.printStackTrace();
            // Handle error, you can redirect to an error page
            return "redirect:/pay";
        }
    }

	
}
