package com.emailSender.Controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import jakarta.servlet.http.HttpSession;
import reactor.core.publisher.Mono;

@Controller
@SessionAttributes("base64Image")
public class QrController {

	@GetMapping("qr")
	public String showPage() {
		return "qrcode";
	}
	 @PostMapping(value = "/generateUPIQR", produces = MediaType.IMAGE_PNG_VALUE)
	    public Mono<byte[]> generateUPIQRCode(@RequestBody Map<String, Object> requestBody) {
	        double amount = Double.parseDouble(requestBody.get("amount").toString());
	        try {
	            // Construct UPI URL
	            String vpa = "rohitkumarah369@ibl";
	            String upiUrl = "upi://pay?pa=" + vpa + "&am=" + amount;

	            // Generate QR code
	            QRCodeWriter qrCodeWriter = new QRCodeWriter();
	            BitMatrix bitMatrix = qrCodeWriter.encode(upiUrl, BarcodeFormat.QR_CODE, 300, 300);

	            // Convert BitMatrix to byte array
	            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
	            MatrixToImageWriter.writeToStream(bitMatrix, "PNG", byteArrayOutputStream);
	            return Mono.just(byteArrayOutputStream.toByteArray());
	        } catch (WriterException | IOException e) {
	            e.printStackTrace();
	            return Mono.error(e);
	        }
	    }
}